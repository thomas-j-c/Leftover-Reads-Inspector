import matplotlib.pyplot as plt

from utility.FileHandlingUtils import FileHandler
from utility.PlotsUtils import PlotsUtils


class GCCalculator:
    def getGCContent(self, sequence):
        """
        Returns the GC content of some sequence.
        :param sequence: The sequence to get the GC content of.
        :return: A float value representing the GC %.
        """
        return ((sequence.count("G") + sequence.count("C")) / len(sequence)) * 100

    def GCCounter(self, data):
        """
        Helper function that finds the overall GC content of all the kmers.
        :return: A dictionary containing the kmer and the overall GC content of it.
        """
        if data is None:  # If there is no data to process, return none
            return
        else:
            outputData = dict()

            for kmer in data:
                outputData.update({kmer: [float("{:.2f}".format(self.getGCContent(kmer)))]})

            return outputData

    def calculateAndWriteToCSV(self, filepath, outputFilename="gc_counts_total_and_bases"):
        """
        Function that calculates the traits of the sequences, and writes them to an output CSV file.
        :param filepath: The file of data for the traits to be calculated from.
        :param outputFilename: The name of the file to be outputted.
        :return: The found data, and the filename.
        """
        handler = FileHandler()
        data = handler.getDataFromInputFile(filepath)
        total = self.GCCounter(data)

        try:
            handler.writeToCSVConvertData(
                fieldNames=["Sequence", "Total GC content"],
                inputData=total, outputFile=outputFilename)

        except AttributeError:
            try:
                handler.writeToCSVNoConvert(
                    fieldNames=["Sequence", "Total GC content"],
                    inputData=total, outputFile=outputFilename
                )

            except FileNotFoundError:
                print("File entered not found. Please try again.")

        except FileNotFoundError:
            print("File entered not found. Please try again.")

        return total, outputFilename

    def binByGCContent(self, filepath, binSize=10):
        """
        Bins the data from given CSV, and returns a dictionary containing the bin and its values.
        :param filepath: The csv file of data. Must have been generated by calculateAndWriteToCSV()
        :param binSize: The size of bins the user would like.
        :return: Dictionary containing the bins 0 through 100, in steps defined by binSize, and the kmers that are in
                 that bin
        """
        binnedData = dict()
        for i in range(0, 100, binSize):
            binnedData.update({f"{i} - {i + binSize}": []})

        fileHandler = FileHandler()
        dataframe = fileHandler.convertCSVToDataFrame(f"{filepath}")

        for i in range(0, len(dataframe)):
            gcContent = dataframe.iloc[i, 1]
            kmer = dataframe.iloc[i, 0]

            for binStart in range(0, 100, binSize):
                if binStart < gcContent < binStart + binSize:
                    listOfKmers = binnedData.get(f"{binStart} - {binStart + binSize}")
                    listOfKmers.append(kmer)
                    binnedData.update({f"{binStart} - {binStart + binSize}":
                                      listOfKmers})
                    break

        return binnedData

    def plotBarChart(self, binnedData, filename="GC_content_bar", yLabel="Default", xLabel="Default", title="Default"):
        """
        Plots a bar chart from data found by other functions in this class.
        :param binnedData: Data, which has been binned using binByGCContent() function.
        :param filename: Name of output plot.
        :param yLabel: Y label for the plot
        :param xLabel: X label for the plot.
        :param title: Title for the plot. All plot options can be customised using calls from the command line.
        """
        plots = PlotsUtils()
        fig, axs = plt.subplots(len(binnedData))
        if len(binnedData) > 1:
            for index, dictionary in enumerate(binnedData):
                plots.makeBarChart([item for item in dictionary.keys()],
                                   [len(item) - 1 for item in dictionary.values()],
                                   axs[index], yLabel, xLabel, title)

        else:
            plots.makeBarChart([item for item in binnedData[0].keys()],
                               [len(item) - 1 for item in binnedData[0].values()],
                               axs, yLabel, xLabel, title)

        plt.savefig(f"../Data/output/plots/{filename}.png", bbox_inches="tight")

    def plotHistograms(self, files, yLabel="Count", xLabel="", title="", barColour="blue", filename="histogram"):
        """
        Plots histograms from data taken from input file(s). If multiple files are inputted, multiple plots are added to
        the same figure.
        :param files: Input files, from the -f command line option
        :param yLabel: Y label for
        :param xLabel:
        :param title:
        :param barColour:
        :param filename:
        :return:
        """
        plots = PlotsUtils()
        dataframes = []
        handler = FileHandler()

        for file in files:
            dataframes.append(handler.convertCSVToDataFrame(file))

        fig, axs = plt.subplots(len(files))
        if len(files) > 1:
            for index, ax in enumerate(axs):
                plots.makeHistogram(dataframes[index].loc[:, "Total GC content"], "", "", "",
                                    barColour=barColour, ax=ax)

        else:
            plots.makeHistogram(dataframes[0].loc[:, "Total GC content"], "", "", "",
                                barColour=barColour, ax=axs)

        fig.suptitle(title)
        fig.supxlabel(xLabel)
        fig.supylabel(yLabel)

        plt.savefig(f"../Data/output/plots/{filename}.png", bbox_inches="tight", dpi=330)

    def calculateDifferenceBinAverage(self, datasetOne, datasetTwo):
        """
        A function that calculates averages of all bins when data has been binned. Finds the average difference of those.
        :param datasetOne: First dataset to compare
        :param datasetTwo: Second dataset to compare
        :return: List containing average distance.
        """
        setOneBinAverages = []
        setTwoBinAverages = []

        for group in datasetOne:
            data = datasetOne.get(group)
            average = sum(data) / len(data)
            setOneBinAverages.append(average)

        for group in datasetTwo:
            data = datasetTwo.get(group)
            average = sum(data) / len(data)
            setTwoBinAverages.append(average)

        outputData = []
        for i in range(0, len(setOneBinAverages)):
            outputData.append(abs(setOneBinAverages[i] - setTwoBinAverages[i]))
            print(f"Difference in bin {i}: {outputData[i]}")

        return outputData

    def main(self, files, barChart=True, histogram=True, csvFileName="gc_counts_total_and_bases",
             binSize=10, yLabel="Number of sequences", xLabel="Bin", title="Plot of GC content",
             histName="output_histogram", barName="output_bar_chart"):
        """
        Main function for this class. creates histogram(s) and bar chart(s) by default.
        :param files: Input files
        :param barChart: Whether the program should create a bar chart
        :param histogram: Whether the program should create a histogram
        :param csvFileName: CSV file name for output
        :param binSize: Size of bins to use to bin the data
        :param yLabel: Y label for bar chart and histogram
        :param xLabel: X label for bar chart and histogram
        :param title: Title for the figures
        :param histName: Output histogram name
        :param barName: Output bar chart name
        """

        count = 0
        binnedData = []
        for filepath in files:
            print(filepath)
            dictOfData, _ = self.calculateAndWriteToCSV(filepath, f"{csvFileName}{count}")
            binnedData.append(self.binByGCContent(f"../Data/output/csv/{csvFileName}{count}.csv", binSize))
            count += 1

        if barChart:
            self.plotBarChart(binnedData, barName, yLabel, xLabel, title)

        filesForHistograms = [f"../Data/output/csv/{csvFileName}{x}.csv" for x in range(0, len(files))]
        if histogram:
            self.plotHistograms(filesForHistograms, yLabel, xLabel, title, filename=histName)

